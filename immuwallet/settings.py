"""
Django settings for more project.

Generated by 'django-admin startproject' using Django 3.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
import sys
import random

import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration

env = os.environ.copy()

PROJECT_ROOT = os.path.dirname(__file__)
sys.path.insert(0, os.path.join(PROJECT_ROOT, 'apps'))

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'asfzc@xwrhwi2tnfn!c#i_^na6^nqs^!9q-9x$4%%#padmncsu'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DJANGO_DEBUG', '') != 'False'

ALLOWED_HOSTS = [
    '*'
]

# Application definition

LOCAL_APPS = [
    'dashboard',
    'api'
]

DEFAULT_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'whitenoise',
    'rest_framework',
    'rest_framework.authtoken',
    'drf_yasg',
    'channels',
    'django_extensions',
    'django_celery_beat',
    'prettyjson',
    'crispy_forms'
]

INSTALLED_APPS = DEFAULT_APPS + LOCAL_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'immuwallet.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'immuwallet/templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'immuwallet.wsgi.application'

# Apontando para o Routing Object do Django Channels
ASGI_APPLICATION = "immuwallet.routing.application"

# Configuração do Redis
# ToDO deixar mais pythonico
try:
    # Formato: REDIS_URL=redis://lolipop:SOME_PASSWORD@dokku-redis-lolipop:6379/
    REDIS_URL = os.environ['REDIS_URL']
    REDIS_USER = REDIS_URL.split(':')[1].replace('//', '')
    REDIS_PASSWORD = REDIS_URL.split(':')[2].split('@')[0]
    REDIS_HOST = REDIS_URL.split(':')[2].split('@')[1]
    REDIS_PORT = REDIS_URL.split(':')[3]
except:
    REDIS_HOST = "localhost"
    REDIS_PASSWORD = None
    REDIS_USER = None
    REDIS_PORT = 6379
    REDIS_URL = f"redis://{REDIS_HOST}:{REDIS_PORT}"

CELERY_BROKER_URL = REDIS_URL
CELERY_RESULT_BACKEND = REDIS_URL
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TASK_SERIALIZER = 'json'
CELERY_TIMEZONE = 'America/Fortaleza'
CELERY_BEAT_SCHEDULE = {
    'task-leituras-antigas': {
        'task': 'medicao.tasks.task_checar_leituras_antigas',
        'schedule': 10,
    },
}

# Configuração da camada de canais para os consumers dos WebSockets
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [os.getenv('REDIS_URL', (REDIS_HOST, REDIS_PORT))],
        },
    },
}

try:
    import channels.layers
    from asgiref.sync import async_to_sync

    channel_layer = channels.layers.get_channel_layer()
    async_to_sync(channel_layer.send)('test_channel', {'type': 'hellou'})
except ConnectionRefusedError:
    print('Camada de comunicação Redis não está ligada. Rode "docker run -p 6379:6379 -d redis:5"')

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'immuwallet',
        'USER': 'postgres',
        'PASSWORD': 'postgres',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

DATE_INPUT_FORMATS = [
    '%m/%d/%Y', '%m/%d/%y', 'iso-8601'
]

DATETIME_INPUT_FORMATS = ['%d/%m/%Y %H:%M:%S', 'iso-8601']

REST_FRAMEWORK = {
    # Todo Descomentar quando pillon arrumar o medidor de renata
    # 'DEFAULT_AUTHENTICATION_CLASSES': [
    #     'rest_framework.authentication.SessionAuthentication',
    #     'rest_framework.authentication.TokenAuthentication',
    # ],
    # 'DEFAULT_PERMISSION_CLASSES': [
    #     'rest_framework.permissions.DjangoModelPermissions',
    # ],
    'DATETIME_FORMAT': "%d/%m/%Y %H:%M:%S",
    'DATE_FORMAT': "%d/%m/%Y",
    'DATETIME_INPUT_FORMATS': DATETIME_INPUT_FORMATS,
    'DATE_INPUT_FORMATS': DATE_INPUT_FORMATS,
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 100
}

SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'api_key': {
            'type': 'apiKey',
            'in': 'header',
            'name': 'Authorization'
        }
    },
}

LOGIN_URL = 'dashboard:login'
LOGOUT_URL = 'dashboard:logout'

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Fortaleza'

USE_I18N = True

USE_L10N = True

USE_TZ = True

AUTH_USER_MODEL = 'dashboard.Usuario'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/
STATIC_URL = '/static/'
STATIC_ROOT = 'static'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'immuwallet/static'),
]

MEDIA_ROOT = 'media'
MEDIA_URL = '/media/'

# Serve para jogar fora o cache de alguns arquivos estáticos no navegador do cliente
# (pela templatetag cachebuster)
PROJECT_VERSION = int(random.random() * 10000)

try:
    from .local_settings import *
except ImportError:
    pass

try:
    from .deploy_settings import *
except ImportError:
    pass

if os.environ.get('SENTRY', '') == 'True':
    sentry_sdk.init(
        dsn="https://b6134bc81848461188b9c4b0176061c4@o407737.ingest.sentry.io/5277325",
        integrations=[DjangoIntegration()],

    # If you wish to associate users to errors (assuming you are using
    # django.contrib.auth) you may enable sending PII data.
    send_default_pii=True
)
